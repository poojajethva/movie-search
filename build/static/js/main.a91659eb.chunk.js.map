{"version":3,"sources":["components/Autocomplete.js","components/ShowCard.js","App.js","reportWebVitals.js","index.js"],"names":["Autocomplete","getSelectedValue","useState","display","setDisplay","options","setOptions","search","setSearch","wrapperRef","useRef","callMe","setCallMe","useEffect","cleanTimeout","setTimeout","length","fetch","then","res","json","Search","results","slice","catch","err","clearTimeout","window","addEventListener","handleClickOutside","removeEventListener","event","wrap","current","contains","target","ref","className","type","placeholder","value","onChange","map","i","Title","onClick","val","tabIndex","ShowCard","rating1","Ratings","Value","rating1Src","Source","rating2","rating2Src","src","Poster","alt","Genre","Runtime","Plot","Released","Language","Director","Actors","App","searchedVal","setSearchedVal","singleDetails","setSingleDetails","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a91659eb.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Autocomplete = ({ getSelectedValue }) => {\r\n  const [display, setDisplay] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const wrapperRef = useRef(null);\r\n  let [callMe, setCallMe] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let cleanTimeout = \"\";\r\n    if (callMe) {\r\n      cleanTimeout = setTimeout(() => {\r\n        if (search.length < 3) {\r\n          setOptions([]);\r\n          setDisplay(false);\r\n        } else {\r\n          fetch(`https://www.omdbapi.com/?s=${search}&page=1&apikey=64bd85e7`)\r\n            .then((res) => res.json())\r\n            .then((res) => {\r\n              if (res.Search) {\r\n                let results =\r\n                  res.Search.length > 5 ? res.Search.slice(0, 5) : res.Search;\r\n                setOptions(results);\r\n                setDisplay(true);\r\n              } else {\r\n                setOptions([]);\r\n                setDisplay(false);\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              setOptions([]);\r\n              setDisplay(false);\r\n            });\r\n        }\r\n      }, 300);\r\n    }\r\n    return () => {\r\n      clearTimeout(cleanTimeout);\r\n    };\r\n  }, [search]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      window.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  });\r\n\r\n  const handleClickOutside = (event) => {\r\n    const { current: wrap } = wrapperRef;\r\n    if (wrap && !wrap.contains(event.target)) {\r\n      setDisplay(false);\r\n    }\r\n  };\r\n\r\n  const updateVal = (val) => {\r\n    setSearch(val);\r\n    setCallMe(false);\r\n    setDisplay(false);\r\n    getSelectedValue(val);\r\n  };\r\n\r\n  return (\r\n    <div ref={wrapperRef} className=\"autocompleteWrapper\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search movies / series\"\r\n        value={search}\r\n        onChange={(event) => {\r\n          setCallMe(true);\r\n          setSearch(event.target.value);\r\n        }}\r\n      />\r\n      {display && (\r\n        <div className=\"autoContainer\">\r\n          {options &&\r\n            options.map(({ Title }, i) => {\r\n              return (\r\n                <div\r\n                  onClick={() => updateVal(Title)}\r\n                  className=\"option\"\r\n                  key={i}\r\n                  tabIndex=\"0\"\r\n                >\r\n                  <span>{Title}</span>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Autocomplete;\r\n","import React from \"react\";\r\n\r\nconst ShowCard = ({ val }) => {\r\n  let rating1 = val.Ratings[0] ? val.Ratings[0].Value : \"\";\r\n  let rating1Src = val.Ratings[0] ? val.Ratings[0].Source : \"\";\r\n  let rating2 = val.Ratings[1] ? val.Ratings[1].Value : \"\";\r\n  let rating2Src = val.Ratings[1] ? val.Ratings[1].Source : \"\";\r\n  return (\r\n    <div className=\"movieWrap\">\r\n      <div className=\"movieLeft\">\r\n        <img src={val.Poster} alt={val.Title} />\r\n      </div>\r\n      <div className=\"movieRight\">\r\n        <div className=\"topData\">\r\n          <div className=\"dataLeft\">\r\n            <div className=\"title\">{val.Title}</div>\r\n            <div className=\"details\">\r\n              <span>{val.Genre}</span>\r\n              <span>{val.Runtime}</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"dataRight\">\r\n            <div className=\"ratings\"><em className=\"ratingTitle\">{rating1Src}:</em> {rating1}</div>\r\n            <div className=\"ratings\"><em className=\"ratingTitle\">{rating2Src}:</em> {rating2}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"para plot\">{val.Plot}</div>\r\n        <div className=\"para\"><em>Released Date</em>: {val.Released}</div>\r\n        <div className=\"para\"><em>Language</em>: {val.Language}</div>\r\n        <div className=\"para\"><em>Director</em>: {val.Director}</div>\r\n        <div className=\"para\"><em>Actors</em>: {val.Actors}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowCard;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Autocomplete from \"./components/Autocomplete\";\nimport ShowCard from \"./components/ShowCard\";\n\nfunction App() {\n  const [searchedVal, setSearchedVal] = useState(\"\");\n  const [singleDetails, setSingleDetails] = useState(null);\n\n  useEffect(() => {\n    if (searchedVal.length > 2) {\n      fetch(`https://www.omdbapi.com/?t=${searchedVal}&page=1&apikey=64bd85e7`)\n        .then((res) => res.json())\n        .then((res) => {\n          setSingleDetails(res);\n        });\n    }\n  }, [searchedVal]);\n  const getSelectedValue = (val) => {\n    setSearchedVal(val);\n  };\n  return (\n    <div className=\"App\">\n      <h2>Search Your Favorite Movies / Series</h2>\n      <Autocomplete getSelectedValue={getSelectedValue} />\n      {!!singleDetails ? <ShowCard val={singleDetails} /> : \"\"}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}